{
  "name": "Timbreexplorer",
  "tagline": "Python code to explore the relationship between musical timbre and dissonance",
  "body": "\r\n# Timbre Explorer\r\n\r\nThe Timbre Explorer module creates Timbre objects for the investigation of the dissonance and consonance properties of musical timbres. The disMeasure() function is not mine - it is a Python translation of [William Setharesâ€™s matlab and C code](http://sethares.engr.wisc.edu/comprog.html). I highly recommend reading his writings on the relationship between tuning and timbre. [Try this](http://sethares.engr.wisc.edu/consemi.html) for starters. I have added functions to do plots of various kinds and to generate .wav files so you can hear the timbres and their dissonance / consonance patterns. Requires Matplotlib, Numpy and Scipy.\r\n\r\n```python\r\nimport Timbre\r\nimport matplotlib.pyplot as plt\r\n```\r\n\r\n\r\n```python\r\n%matplotlib inline\r\nplt.rcParams['figure.figsize'] = (10, 6)\r\n```\r\n\r\nTypical usage, assuming you cd to the directory that contains the Timbre directory and run Python 2.7x from there:\r\n* import Timbre\r\n* foo = Timbre.Even()\r\n* foo.disMeasure(octaves = 1) # perform the dissonance calculation\r\n* foo.disPlot() # plot the dissonance curve for the timbre\r\n* foo.ConsDisFreqs() # plot of the maximima and minima in the dissonance curve\r\n* foo.partialsPlot() # bar plot of the relative amplitudes and frequencies for the partials of the timbre \r\n* foo.wavePlot() # plot one period of the timbre's waveform\r\n* foo.timbreGen() # Generate a 5 second sample of the timbre \r\n* foo.timbreSweep(length = 60) # Generate a sweep of the timbre against itself\r\n\r\nCreate some Timbre objects. Objects can be initialized as:\r\n * Even (even partials)\r\n * Odd (odd partials)\r\n * Evenodd (even and odd partials etc.)\r\n * Square \r\n * Sawtooth\r\n * Triangle\r\n * Beam\r\n * Custom\r\n\r\n\r\n```python\r\neven = Timbre.Even()\r\nodd = Timbre.Odd()\r\nbeam = Timbre.Beam()\r\n```\r\n\r\n    Timbre successfully initialized with parameters of 220Hz, 7 partials, attenuation factor of 0.71\r\n    \r\n    Timbre successfully initialized with parameters of 220Hz, 7 partials, attenuation factor of 0.71\r\n    \r\n    Timbre successfully initialized with Beam partials\r\n\r\n\r\n\r\nMake some plots:\r\n\r\n\r\n```python\r\neven.disPlot()\r\n```\r\n\r\n\r\n![png](images/output_9_0.png)\r\n\r\n\r\nNote the flat third (interval 4) \r\n\r\n\r\n```python\r\nodd.disPlot()\r\n```\r\n\r\n\r\n![png](images/output_11_0.png)\r\n\r\n\r\n\r\n```python\r\nbeam.disPlot()\r\n```\r\n\r\n\r\n![png](images/output_12_0.png)\r\n\r\n\r\nNote the stetched partials of the vibrating beam timbre, especially the sixth and octave\r\n\r\n\r\n```python\r\nTimbre.disPlotMultiple(even, odd, beam)\r\n```\r\n\r\n\r\n![png](images/output_14_0.png)\r\n\r\n\r\n\r\n```python\r\nsquare = Timbre.Square(n_partials = 25)\r\n```\r\n\r\n    Timbre successfully initialized with parameters of 220Hz, 25 partials\r\n    \r\n\r\n\r\n\r\n```python\r\nsquare.wavePlot()\r\n```\r\n\r\n\r\n![png](images/output_16_0.png)\r\n\r\n\r\n\r\n```python\r\nsquare.partialsPlot()\r\n```\r\n\r\n\r\n![png](images/output_17_0.png)\r\n\r\n\r\n\r\n```python\r\nsquare.disMeasure()\r\nsquare.disPlot()\r\n```\r\n\r\n\r\n![png](images/output_18_0.png)\r\n\r\n\r\n\r\n```python\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}